#!/usr/bin/env python3

import os
import subprocess
import dbus
import dbus.service
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GLib

class FileManagerService(dbus.service.Object):
    def __init__(self, main_loop):
        DBusGMainLoop(set_as_default=True)
        
        self.bus = dbus.SessionBus()
        
        bus_name = dbus.service.BusName('org.freedesktop.FileManager1', self.bus)
        
        super().__init__(bus_name, '/org/freedesktop/FileManager1')
        
        self.main_loop = main_loop
        
        self.timeout_id = None
        self.setup_auto_exit()
    
    def setup_auto_exit(self):
        if self.timeout_id:
            GLib.source_remove(self.timeout_id)
        
        self.timeout_id = GLib.timeout_add_seconds(30, self.auto_exit)
    
    def auto_exit(self):
        self.main_loop.quit()
        return False
    
    def reset_auto_exit_timer(self):
        self.setup_auto_exit()
    
    def show_items(self, items):
        self.reset_auto_exit_timer()
        
        terminal = os.getenv('TERMINAL')
        if not terminal:
            return
        
        for item in items:
            if item.startswith('file://'):
                file_path = item[7:]
            else:
                file_path = item
            
            cmd = [terminal, '-e', 'lf', file_path]
            
            try:
                subprocess.Popen(cmd)
            except Exception as e:
                pass
    
    @dbus.service.method(
        dbus_interface='org.freedesktop.FileManager1',
        in_signature='ass',
        out_signature=''
    )
    def ShowItems(self, items, startup_id):
        self.show_items(items)
    
    @dbus.service.method(
        dbus_interface='org.freedesktop.FileManager1',
        in_signature='ass',
        out_signature=''
    )
    def ShowFolders(self, folders, startup_id):
        self.show_items(folders)
    
    @dbus.service.method(
        dbus_interface='org.freedesktop.FileManager1',
        in_signature='ass',
        out_signature=''
    )
    def ShowItemProperties(self, items, startup_id):
        self.reset_auto_exit_timer()


def main():
    try:
        loop = GLib.MainLoop()
        service = FileManagerService(loop)
        loop.run()
        
    except Exception as e:
        return 1
    
    return 0


if __name__ == '__main__':
    exit(main())
