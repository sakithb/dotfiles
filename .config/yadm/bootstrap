#!/usr/bin/env bash

set -euo pipefail

run_or_fail() {
    local error_msg="$1"
    shift
    if ! "$@" ; then
        echo "$error_msg"
        exit 1
    fi
}

ask() {
    read -p "$1 (y/n)? " ANSWER < /dev/tty
    [[ "$ANSWER" == "y" ]]
}

if [ "$EUID" -eq 0 ] && ! ask "Was running this script as root intentional"; then
  exit
fi

echo "=== Setup ==="

# Install yay

if ! command -v yay > /dev/null; then
    git clone https://aur.archlinux.org/yay.git "/tmp/yay"
    pushd /tmp/yay
    makepkg -si --noconfirm --clean --cleanbuild --rmdeps
    popd
    rm -rf /tmp/yay
fi

if ask "Legacy setup"; then
    # Install packages

    yay -S --needed \
        --noconfirm --sudoloop \
        --cleanafter --removemake \
        - < "$HOME/.config/yadm/packages.list"

    # Setup services

    systemctl --user enable \
        waybar.service mako.service hyprpaper.service hypridle.service \
        clipboard-history-watcher.service fuzzel-polkit-agent.service udiskie.service \
        battery-level-watcher.timer wallpaper-slideshow.timer

    systemctl --user disable \
        gcr-ssh-agent

    sudo systemctl enable \
        keyd tlp udisks2

    # System level config files

    while read -r src_file; do
        rel_path="${src_file#$HOME/.config/yadm/root/}"
        dest_path="/$rel_path"

        dest_dir="$(dirname "$dest_path")"
        if [[ ! -d "$dest_dir" ]]; then
            mkdir -p "$dest_dir"
        fi

        if [[ -e "$dest_path" || -L "$dest_path" ]]; then
            if ask "$dest_path exists. Backup and overwrite"; then
                sudo mv "$dest_path" "$dest_path.bk"
                sudo ln -s "$src_file" "$dest_path"
                echo "Backed up and linked: '$dest_path' -> '$src_file'"
            else
                echo "Skipped: '$dest_path'"
            fi
        else
            sudo ln -s "$src_file" "$dest_path"
            echo "Linked: '$dest_path' -> '$src_file'"
        fi
    done < <(find "$HOME/.config/yadm/root/" -type f)

    sudo mkinitcpio -P

    # Install packages needing manual intervention

    if ! yay -Q cmd-polkit-git 2> /dev/null; then
        pushd /tmp/
        yay -G cmd-polkit-git
        pushd /tmp/cmd-polkit-git
        patch "PKGBUILD" "$HOME/.config/yadm/cmd-polkit-git-PKGBUILD.patch"
        makepkg -si --noconfirm --clean --cleanbuild --rmdeps
        popd
        popd
    fi

    # Setup environment

    mkdir -p "$HOME"/{Videos,Pictures}
    mkdir -p "$HOME/projects"/{personal,work,other}

    git config --global user.email "pvsakith@gmail.com"
    git config --global user.name "Sakith B."

    echo "=== Setup complete ==="
fi

if ask "Setup GPG and SSH"; then
    echo "=== SSH and GPG ==="

    read -p "Enter github token: " TOKEN

    run_or_fail "Failed to import gpg public key" gpg --quiet --batch --yes \
        --keyserver hkps://keys.openpgp.org \
        --recv-keys 1B9C83430CA29B0B07680C0FBCF3B451C3CA33C2

    run_or_fail "Failed to import gpg private key" curl -s -f \
        -H "Authorization: token $TOKEN" \
        -H "Accept: application/vnd.github.raw" \
        "https://api.github.com/repos/sakithb/dotsecrets/contents/gpg-private-keys.asc.gpg" \
        | gpg --quiet --decrypt | gpg --quiet --import

    echo "GPG keys imported successfully"

    export GPG_TTY=$(tty)
    export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)

    gpg-connect-agent reloadagent /bye

    sudo pacman -S openssh --needed --noconfirm

    yadm remote set-url origin "git@github.com:sakithb/dotfiles.git"
    yadm submodule update --init --remote "$HOME/.secrets"

    ln -s "$HOME/.secrets/.password-store" "$HOME/.password-store"

    echo "=== SSH and GPG complete ==="
fi

if ask "Setup secure boot"; then
    echo "=== Secure boot ==="

    if [[ "$(sbctl status --json | jq '.setup_mode')" = "true" ]]; then
        sudo sbctl create-keys
        sudo sbctl enroll-keys -m

        sudo sbctl verify --json \
                | jq '.[].file_name' \
                | xargs -n 1 sudo sbctl sign -s

        sudo sbctl sign -s \
            -o /usr/lib/systemd/boot/efi/systemd-bootx64.efi.signed \
            /usr/lib/systemd/boot/efi/systemd-bootx64.efi
    else
        echo "Please enter setup mode and retry"
        exit
    fi

    echo "=== Secure boot complete ==="
fi
